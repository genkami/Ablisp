import * from "./error.ab"
import * from "./object.ab"
import * from "./env.ab"
import * from "./runtime_corelib.ab"
import * from "./testing.ab"
import * from "./eval_test_utils.ab"

fun test_runtime_corelib_syntax_lambda() {
    test_section("test_runtime_corelib_syntax_lambda")
    debug_clear_all_objects()

    let env = runtime_corelib_import(new_env())

    test_expectation("it should create a closure (no args)")
    assert_exprs_equal(
        "((lambda () 123))",
        "123",
        env,
    )?

    test_expectation("it should create a closure (single arg)")
    assert_exprs_equal(
        "((lambda (x) x) \"a\")",
        "\"a\"",
        env,
    )?

    test_expectation("it should create a closure (many args)")
    assert_exprs_equal(
        "((lambda (a b c) (cons a (cons b (cons c nil)))) 3 2 1)",
        "'(3 2 1)",
        env,
    )?
}

main {
    test_runtime_corelib_syntax_lambda()?
}
