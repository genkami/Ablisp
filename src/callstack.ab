// Module callstack provides stacks for heap objects to implement recursive functions.
// The stack itself is not allocated in the heap.
//
// The reason why we provide callstack is because Amber functions cannot call themselves recursively.
// There are two ways to write a recursive algorithm in Amber:
// - Convert the algorithm into an iterative one and use `callstack` to memorize function states.
//   This is faster than the other solution, so use `callstack` if possible.
// - Use native functions provided by `native.ab`.
//   Native functions are functions that can be called from Abilsp,
//   but it also allows functions to recursively call themselves (and even allows mutual recursion).
//   Use native functions only when the function needs to be called from Ablisp,
//   because native functions tend to be extremely slow.

import {len} from "std"

let _stack = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
let _stack_next = 0

// callstack_push pushes `elem` to the stack.
// The stack only has weak references, so there's no guarantee that `elem` will not be garbage collected.
pub fun callstack_push(elem: Num): Null {
    if len(_stack) <= _stack_next {
        _stack += [elem]
    } else {
        _stack[_stack_next] = elem
    }
    _stack_next += 1
}

pub fun callstack_pop(): Num {
    _stack_next -= 1
    return _stack[_stack_next]
}

pub fun callstack_current_sp(): Num {
    return _stack_next
}

pub fun callstack_rewind(new_sp: Num): Null {
    if _stack_next < new_sp {
        echo "BUG: callstack_rewind: invalid location: {new_sp}"
    }
    _stack_next = new_sp
}