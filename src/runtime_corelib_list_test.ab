import * from "./error.ab"
import * from "./object.ab"
import * from "./env.ab"
import * from "./runtime_corelib.ab"
import * from "./testing.ab"
import * from "./eval_test_utils.ab"

fun test_runtime_corelib_list_list() {
    test_section("test_runtime_corelib_list_list")
    debug_clear_all_objects()

    test_expectation("it should make a list")
    let env = runtime_corelib_import(new_env())
    assert_exprs_equal(
        "(list)",
        "nil",
        env,
    )?
    assert_exprs_equal(
        "(list 1 2 3)",
        "'(1 2 3)",
        env,
    )?
}

fun test_runtime_corelib_list_map() {
    test_section("test_runtime_corelib_list_map")
    debug_clear_all_objects()

    test_expectation("it should apply a function to each element of a list")
    let env = runtime_corelib_import(new_env())
    env = must_parse_and_eval_decl("(defun double (x) (* x 2))", env)?
    assert_exprs_equal(
        "(map double nil)",
        "nil",
        env,
    )?
    assert_exprs_equal(
        "(map double '(1 2 3))",
        "'(2 4 6)",
        env,
    )?
}

fun test_runtime_corelib_list_iota() {
    test_section("test_runtime_corelib_list_iota")
    debug_clear_all_objects()

    test_expectation("it should make a sequence of numbers")
    let env = runtime_corelib_import(new_env())
    assert_exprs_equal(
        "(iota 3)",
        "'(0 1 2)",
        env,
    )?
    assert_exprs_equal(
        "(iota 1 5)",
        "'(1 2 3 4)",
        env,
    )?
    assert_exprs_equal(
        "(iota 0)",
        "nil",
        env,
    )?
}

main {
    test_runtime_corelib_list_list()?
    test_runtime_corelib_list_map()?
    test_runtime_corelib_list_iota()?
}
