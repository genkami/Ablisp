import {len} from "std"
import * from "./error.ab"
import * from "./testing.ab"

fun test_error_ok() {
    test_section("test_error_ok")
    test_expectation("new_ok() returns an ok with a given value")
    let res = new_ok(123)
    assert(result_is_ok(res), "res should be ok, got {res}")?
    assert(not result_is_err(res), "res should not be err, got {res}")?
    assert_equal_num(ok_val(res), 123)?
}

fun test_error_err() {
    test_section("test_error_err")
    test_expectation("new_err() returns an err with a given code and reason")
    let res = new_err("dummy_code", "dummy reason")
    assert(result_is_err(res), "res should be err, got {res}")?
    assert(not result_is_ok(res), "res should not be ok, got {res}")?
    assert_equal_text(err_code(res), "dummy_code")?
    assert_equal_text(err_reason(res), "dummy reason")?
    assert_equal_text_array(err_traces(res), [Text])?

    test_expectation("err_add_trace adds a trace to an err")
    res = err_add_trace(res, "func1")
    assert_equal_text_array(err_traces(res), ["func1"])?

    res = err_add_trace(res, "outer_func")
    assert_equal_text_array(err_traces(res), ["func1", "outer_func"])?
}

pub fun test_error() {
    test_error_ok()?
    test_error_err()?
}

main {
    test_error()?
}
