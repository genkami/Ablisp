// Module list provides list functions for Ablisp.

import * from "./native.ab"
import * from "./error.ab"
import * from "./object.ab"
import * from "./env.ab"
import * from "./eval.ab"

let _funcref_list = ""
let _funcref_map = ""
let _funcref_iota = ""

pub fun runtime_corelib_syntax_list_list_funcref(): Text {
    return _funcref_list
}

let _list_desc = "Makes a list.

```
> (list)
;=> nil
> (list 1 2 3)
;=> (1 2 3)
```
"

fun list_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    native_return(result_args)
    return null
}

native_track_next_funcall()
list_impl()
_funcref_list = native_get_last_funcref()

pub fun runtime_corelib_syntax_list_map_funcref(): Text {
    return _funcref_map
}

let _map_desc = "Applies a function to each element of a list.

```
> (defun double (x) (* x 2))
> (map double nil)
;=> nil
> (map double (list 1 2 3))
;=> (2 4 6)
```
"

fun map_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    if not object_is_cons(args) {
        native_return(new_err(code_invalid_argument(), "wrong number of arguments: " + object_to_string(args)))
        return null
    }
    let f = cons_car(args)
    args = cons_cdr(args)
    if not object_is_cons(args) {
        native_return(new_err(code_invalid_argument(), "wrong number of arguments: " + object_to_string(args)))
        return null
    }
    let list = cons_car(args)
    args = cons_cdr(args)
    if not object_is_nil(args) {
        native_return(new_err(code_invalid_argument(), "wrong number of arguments: " + object_to_string(args)))
        return null
    }

    let values = [Num]
    loop {
        if object_is_nil(list) {
            break
        }
        if not object_is_cons(list) {
            native_return(new_err(code_invalid_argument(), "not a list: " + object_to_string(list)))
            return null
        }
        let i = cons_car(list)
        list = cons_cdr(list)
        let fun_args = new_nil()
        fun_args = new_cons(i, fun_args)
        let result = apply_function(f, fun_args)
        if result_is_err(result) {
            native_return(result)
            return null
        }
        values = [ok_val(result)] + values
    }

    let values_list = new_nil()
    loop i in values {
        values_list = new_cons(i, values_list)
    }
    native_return(new_ok(values_list))
    return null
}

native_track_next_funcall()
map_impl()
_funcref_map = native_get_last_funcref()

pub fun runtime_corelib_syntax_list_iota_funcref(): Text {
    return _funcref_iota
}

let _iota_desc = "Returns a sequence of numbers.

```
> (iota 3)
;=> (0 1 2)
> (iota 1 5)
;=> (1 2 3 4)
> (iota 0)
;=> nil
```
"

fun iota_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    if not object_is_cons(args) {
        native_return(new_err(code_invalid_argument(), "wrong number of arguments: " + object_to_string(args)))
        return null
    }
    let start = 0
    let end = 0
    let first_arg = cons_car(args)
    args = cons_cdr(args)
    if not object_is_num(first_arg) {
        native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(first_arg)))
        return null
    }
    end = num_value(first_arg)
    if not object_is_nil(args) {
        if not object_is_cons(args) {
            native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
            return null
        }
        let second_arg = cons_car(args)
        args = cons_cdr(args)
        if not object_is_num(second_arg) {
            native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(second_arg)))
            return null
        }
        if not object_is_nil(args) {
            native_return(new_err(code_invalid_argument(), "wrong number of arguments: " + object_to_string(args)))
            return null
        }
        start = end
        end = num_value(second_arg)
    }

    let i = end - 1
    let list = new_nil()
    loop {
        if i < start {
            break
        }
        list = new_cons(new_num(i), list)
        i -= 1
    }
    native_return(new_ok(list))
    return null
}

native_track_next_funcall()
iota_impl()
_funcref_iota = native_get_last_funcref()

// TODO:
// - filter
// - foldl/foldr
// - assq/assv
// - assoc
// - foreach

pub fun runtime_corelib_list_import(env: Num): Num {
    env = env_define(env, new_symbol("iota"), new_native_fun(_funcref_iota, _iota_desc))
    env = env_define(env, new_symbol("map"), new_native_fun(_funcref_map, _map_desc))
    env = env_define(env, new_symbol("list"), new_native_fun(_funcref_list, _list_desc))
    return env
}