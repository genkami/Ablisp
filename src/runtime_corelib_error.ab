// Module error provides exception handling features for Ablisp.

import * from "./native.ab"
import * from "./error.ab"
import * from "./object.ab"
import * from "./env.ab"
import * from "./eval.ab"

let _funcref_error = ""

pub fun runtime_corelib_error_error_funcref(): Text {
    return _funcref_error
}

let _error_desc = "Raises a user error.

```
> (error \"wrong argument!\")
Error: user_error: wrong argument!
at native function <error_impl__677_v0>
> (error \"my_error\" \"something is wrong\") ; custom error code
Error: my_error: something is wrong
at native function <error_impl__677_v0>
```
"

fun error_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    if not object_is_cons(args) {
        native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
        return null
    }
    let msg = cons_car(args)
    args = cons_cdr(args)
    if not object_is_text(msg) {
        native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
        return null
    }
    let code = ""
    if object_is_nil(args) {
        code = code_user_error()
    }
    if object_is_cons(args) {
        let next = cons_car(args)
        if not object_is_text(next) {
            native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
            return null
        }
        code = text_value(msg)
        msg = next
        args = cons_cdr(args)
        if not object_is_nil(args) {
            native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
            return null
        }
    }
    if code == "" {
        native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
        return null
    }
    let err = new_err(code, text_value(msg))
    native_return(err)
    return null
}

native_track_next_funcall()
error_impl()
_funcref_error = native_get_last_funcref()

// TODO:
// - catch

pub fun runtime_corelib_error_import(env: Num): Num {
    env = env_define(env, new_symbol("error"), new_native_fun(_funcref_error, _error_desc))
    return env
}
