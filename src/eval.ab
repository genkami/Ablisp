// Module eval provides an Ablisp evaluator.
import * from "./error.ab"
import * from "./object.ab"
import * from "./callstack.ab"
import * from "./native.ab"
import * from "./env.ab"

let _funcref_eval_expr = ""

// eval evaluates `expr` with a given `env` and returns an evaluated expression in result form.
// `context` is a string to indicate where the expr is evaluated (mainly for debug purpose).
pub fun eval_expr(expr: Num, env: Num, context: Text): [Text] {
    let args = new_nil()
    args = new_cons(new_text(context), args)
    args = new_cons(env, args)
    args = new_cons(expr, args)
    return native_call(_funcref_eval_expr, args)
}

// eval_sequence evaluates a list of expressions using `eval_expr`.
pub fun eval_sequence(expr_seq: Num, env: Num, ctx: Text): [Text] {
    let last_val = new_nil()
    loop {
        if object_is_nil(expr_seq) {
            break
        }
        if not object_is_cons(expr_seq) {
            let err = new_err(code_syntax_error(), "invalid sequence of expressions: " + object_to_string(expr_seq))
            return err
        }
        let expr = cons_car(expr_seq)
        expr_seq = cons_cdr(expr_seq)

        let val_result = eval_expr(expr, env, ctx)
        if result_is_err(val_result) {
            return val_result
        }
        last_val = ok_val(val_result)
    }
    return new_ok(last_val)
}

// eval_decl evalates decls and returns an environment which was
// obtained by applying `env` to the implementation of the decl.
// It returns `invalid_decl` error when `expr` is not an application of a decl.
pub fun eval_decl(expr: Num, env: Num, context: Text): [Text] {
    if not object_is_cons(expr) {
        return new_err(code_syntax_error(), "invalid decl: " + object_to_string(expr))
    }
    let decl_expr = cons_car(expr)
    let args = cons_cdr(expr)
    if not object_is_symbol(decl_expr) {
        return new_err(code_invalid_decl(), "invalid decl: " + object_to_string(decl_expr))
    }
    let decl_val_result = env_lookup(env, decl_expr)
    if result_is_err(decl_val_result) {
        return decl_val_result
    }
    let decl_val = ok_val(decl_val_result)
    if not object_is_decl(decl_val) {
        return new_err(code_invalid_decl(), "not a decl: " + object_to_string(decl_expr))
    }
    let decl_fref = decl_funcref(decl_val)
    args = new_cons(new_text(context), args)
    args = new_cons(env, args)
    let new_env_result = native_call(decl_fref, args)
    return new_env_result
}

fun expr_is_literal(expr: Num): Bool {
    if object_is_num(expr) {
        return true
    }
    if object_is_text(expr) {
        return true
    }
    if object_is_t(expr) {
        return true
    }
    if object_is_nil(expr) {
        return true
    }
    return false
}

fun eval_literal(expr: Num): [Text] {
    return new_ok(expr)
}

fun expr_is_var(expr: Num): Bool {
    return object_is_symbol(expr)
}

fun eval_var(expr: Num, env: Num): [Text] {
    return env_lookup(env, expr)
}

fun apply_closure(cl: Num, args: Num): [Text] {
    let ctx = closure_name(cl)
    let params = closure_params(cl)
    let body = closure_body(cl)
    let env = closure_env(cl)

    loop {
        if object_is_nil(params) {
            if not object_is_nil(args) {
                return new_err(code_invalid_argument(), "argument number mismatch")
            }
            break
        }
        if object_is_nil(args) {
            if not object_is_nil(params) {
                return new_err(code_invalid_argument(), "argument number mismatch")
            }
            break
        }
        let param = cons_car(params)
        params = cons_cdr(params)
        let arg = cons_car(args)
        args = cons_cdr(args)

        if not object_is_symbol(param) {
            return new_err(code_syntax_error(), "invalid parameter name: " + object_to_string(param))
        }
        env = env_define(env, param, arg)
    }

    let last_value = new_nil()
    loop {
        if object_is_nil(body) {
            break
        }
        if not object_is_cons(body) {
            return new_err(code_syntax_error(), "invalid closure body: " + object_to_string(body))
        }
        let expr = cons_car(body)
        body = cons_cdr(body)
        let result = eval_expr(expr, env, ctx)
        if result_is_err(result) {
            return result
        }
        last_value = ok_val(result)
    }
    return new_ok(last_value)
}

// apply_function applies any kind of functions to the arguments.
pub fun apply_function(f: Num, args: Num): [Text] {
    if object_is_native_fun(f) {
        let fref = native_fun_funcref(f)
        let call_result = native_call(fref, args)
        if result_is_err(call_result) {
            let err = err_add_trace(call_result, "native function <" + fref + ">")
            return err
        }
        return call_result
    }

    if object_is_closure(f) {
        let call_result = apply_closure(f, args)
        if result_is_err(call_result) {
            let err = err_add_trace(call_result, closure_name(f))
            return err
        }
        return call_result
    }

    if object_is_decl(f) {
        let err = new_err(code_syntax_error(), "declaration " + object_to_string(f) + " cannot be used here")
        return err
    }

    let err = new_err(code_value_error(), object_to_string(f) + " is not callable")
    return err
}

fun eval_app(expr: Num, env: Num, context: Num): [Text] {
    if not object_is_cons(expr) {
        let err = new_err(code_syntax_error(), "malformed function application: " + object_to_string(expr))
        return err
    }
    let fun_expr = cons_car(expr)
    let args_exprs = cons_cdr(expr)

    let eval_fun_args = new_nil()
    let result_fun_val = eval_expr(fun_expr, env, text_value(context))
    if result_is_err(result_fun_val) {
        return result_fun_val
    }
    let fun_val = ok_val(result_fun_val)
    if object_is_special_form(fun_val) {
        let fref = special_form_funcref(fun_val)
        let sf_args = new_cons(context, args_exprs)
        sf_args = new_cons(env, sf_args)
        let call_result = native_call(fref, sf_args)
        if result_is_err(call_result) {
            let err = err_add_trace(call_result, "special form <" + fref + ">")
            return err
        }
        return call_result
    }

    let args_val_array = [Num]
    let iter = args_exprs
    loop {
        if object_is_nil(iter) {
            break
        }
        if not object_is_cons(iter) {
            let err = new_err(code_syntax_error(), "malformed function application: " + object_to_string(expr))
            return err
        }
        let arg_expr = cons_car(iter)
        iter = cons_cdr(iter)
        let result_arg_val = eval_expr(arg_expr, env, text_value(context))
        if result_is_err(result_arg_val) {
            return result_arg_val
        }
        args_val_array = [ok_val(result_arg_val)] + args_val_array
    }

    let args_vals = new_nil()
    loop i in args_val_array {
        args_vals = new_cons(i, args_vals)
    }

    return apply_function(fun_val, args_vals)
}

pub fun eval_expr_funcref(): Text {
    return _funcref_eval_expr
}

fun eval_expr_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    if not object_is_cons(args) {
        let err = new_err(code_invalid_argument(), "invalid argument: " + object_to_string(args))
        err = err_add_trace(err, "eval")
        native_return(err)
        return null
    }
    let expr = cons_car(args)
    args = cons_cdr(args)
    if not object_is_cons(args) {
        let err = new_err(code_invalid_argument(), "invalid argument: " + object_to_string(args))
        err = err_add_trace(err, "eval")
        native_return(err)
        return null
    }
    let env = cons_car(args)
    args = cons_cdr(args)
    if (not object_is_cons(env)) or (not object_is_cons(args)) {
        let err = new_err(code_invalid_argument(), "invalid argument: " + object_to_string(args))
        err = err_add_trace(err, "eval")
        native_return(err)
        return null
    }
    let context = cons_car(args)
    args = cons_cdr(args)
    if (not object_is_text(context)) or (not object_is_nil(args)) {
        let err = new_err(code_invalid_argument(), "invalid argument: " + object_to_string(args))
        err = err_add_trace(err, "eval")
        native_return(err)
        return null
    }
    if expr_is_literal(expr) {
        let result_val = eval_literal(expr)
        native_return(result_val)
        return null
    }
    if expr_is_var(expr) {
        let result_val = eval_var(expr, env)
        native_return(result_val)
        return null
    }
    let result_val = eval_app(expr, env, context)
    native_return(result_val)
    return null
}

native_track_next_funcall()
eval_expr_impl()
_funcref_eval_expr = native_get_last_funcref()
