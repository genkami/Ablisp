import * from "./error.ab"
import * from "./object.ab"
import * from "./env.ab"
import * from "./native.ab"
import * from "./eval.ab"
import * from "./testing.ab"
import * from "./eval_test_utils.ab"

let _funcref_const_123 = ""

fun const_123_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    native_return(new_ok(new_num(123)))
    return null
}

native_track_next_funcall()
const_123_impl()
_funcref_const_123 = native_get_last_funcref()

let _funcref_return_args = ""

fun return_args_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    native_return(result_args)
    return null
}

native_track_next_funcall()
return_args_impl()
_funcref_return_args = native_get_last_funcref()

fun test_eval_native_fun() {
    test_section("test_eval_native_fun")

    test_expectation("it should call a function (no arg)")
    debug_clear_all_objects()
    let env = new_env()
    env = env_define(env, new_symbol("f"), new_native_fun(_funcref_const_123, "test"))
    let got = must_parse_and_eval("(f)", env)?
    assert_object_equal(got, new_num(123))?

    test_expectation("it should call a function (single arg)")
    debug_clear_all_objects()
    let env = new_env()
    env = env_define(env, new_symbol("f"), new_native_fun(_funcref_return_args, "test"))
    env = env_define(env, new_symbol("x"), new_num(1))
    let got = must_parse_and_eval("(f x)", env)?
    let want = new_nil()
    want = new_cons(new_num(1), want)
    assert_object_equal(got, want)?
    
    test_expectation("it should call a function (many args)")
    debug_clear_all_objects()
    let env = new_env()
    env = env_define(env, new_symbol("f"), new_native_fun(_funcref_return_args, "test"))
    env = env_define(env, new_symbol("x"), new_num(1))
    env = env_define(env, new_symbol("y"), new_num(2))
    env = env_define(env, new_symbol("z"), new_t())
    let got = must_parse_and_eval("(f x y z)", env)?
    let want = new_nil()
    want = new_cons(new_t(), want)
    want = new_cons(new_num(2), want)
    want = new_cons(new_num(1), want)
    assert_object_equal(got, want)?
}

main {
    test_eval_native_fun()?
}
