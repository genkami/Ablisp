// Module math provides math functions for Ablisp.

import * from "./error.ab"
import * from "./object.ab"
import * from "./native.ab"
import * from "./env.ab"
import * from "./eval.ab"

let _funcref_add = ""
let _funcref_sub = ""
let _funcref_mul = ""
let _funcref_div = ""
let _funcref_mod = ""

pub fun runtime_corelib_math_add_funcref(): Text {
    return _funcref_add
}

let _add_desc = "Adds arguments.

```
> (+)
;=> 0
> (+ 1)
;=> 1
> (+ 1 2 3)
;=> 6
```
"

fun add_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    let sum = 0
    loop {
        if object_is_nil(args) {
            break
        }
        if not object_is_cons(args) {
            native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
            return null
        }
        let next = cons_car(args)
        args = cons_cdr(args)
        if not object_is_num(next) {
            native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(next)))
            return null
        }
        sum += num_value(next)
    }
    native_return(new_ok(new_num(sum)))
}

native_track_next_funcall()
add_impl()
_funcref_add = native_get_last_funcref()

pub fun runtime_corelib_math_sub_funcref(): Text {
    return _funcref_sub
}

let _sub_desc = "Subtracts arguments.

```
> (- 3)
;=> -3
> (- 3 2)
;=> 1
> (- 3 2 1)
;=> 0
```
"

fun sub_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    if not object_is_cons(args) {
        native_return(new_err(code_invalid_argument(), "empty argument: " + object_to_string(args)))
        return null
    }
    let first_obj = cons_car(args)
    args = cons_cdr(args)
    if not object_is_num(first_obj) {
        native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(first_obj)))
        return null
    }
    let result = num_value(first_obj)

    let has_more_than_one_args = false
    loop {
        if object_is_nil(args) {
            break
        }
        has_more_than_one_args = true
        if not object_is_cons(args) {
            native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
            return null
        }
        let next = cons_car(args)
        args = cons_cdr(args)
        if not object_is_num(next) {
            native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(next)))
            return null
        }
        result -= num_value(next)
    }
    if not has_more_than_one_args {
        result = -result
    }
    native_return(new_ok(new_num(result)))
}

native_track_next_funcall()
sub_impl()
_funcref_sub = native_get_last_funcref()

pub fun runtime_corelib_math_mul_funcref(): Text {
    return _funcref_mul
}

let _mul_desc = "Multiplies arguments.

```
> (*)
;=> 1
> (* 3)
;=> 3
> (* 3 4 -5)
;=> -64
```
"

fun mul_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    let prod = 1
    loop {
        if object_is_nil(args) {
            break
        }
        if not object_is_cons(args) {
            native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
            return null
        }
        let next = cons_car(args)
        args = cons_cdr(args)
        if not object_is_num(next) {
            native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(next)))
            return null
        }
        prod *= num_value(next)
    }
    native_return(new_ok(new_num(prod)))
}

native_track_next_funcall()
mul_impl()
_funcref_mul = native_get_last_funcref()

pub fun runtime_corelib_math_div_funcref(): Text {
    return _funcref_div
}

let _div_desc = "Divides arguments.
> (/ 3)
;=> .33333333333333333333
> (/ 9 3)
;=> 3
> (/ 9 3 3)
;=> 1
> (/ 9 0)
Error: zero_division: division by zero
at native function <div_impl__959_v0>
"

fun div_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    if not object_is_cons(args) {
        native_return(new_err(code_invalid_argument(), "empty argument: " + object_to_string(args)))
        return null
    }
    let first_obj = cons_car(args)
    args = cons_cdr(args)
    if not object_is_num(first_obj) {
        native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(first_obj)))
        return null
    }
    let result = num_value(first_obj)

    let has_more_than_one_args = false
    loop {
        if object_is_nil(args) {
            break
        }
        has_more_than_one_args = true
        if not object_is_cons(args) {
            native_return(new_err(code_invalid_argument(), "invalid argument list: " + object_to_string(args)))
            return null
        }
        let next = cons_car(args)
        args = cons_cdr(args)
        if not object_is_num(next) {
            native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(next)))
            return null
        }
        if num_value(next) == 0 {
            native_return(new_err(code_zero_division(), "division by zero"))
            return null
        }
        result /= num_value(next)
    }
    if not has_more_than_one_args {
        result = 1 / result
    }
    native_return(new_ok(new_num(result)))
}

native_track_next_funcall()
div_impl()
_funcref_div = native_get_last_funcref()

pub fun runtime_corelib_math_mod_funcref(): Text {
    return _funcref_mod
}

let _mod_desc = "Returns the remainder of a division.

```
> (% 7 3)
1
> (% -7 3)
-2
> (% 7 0)
Error: zero_division: division by zero
at native function <mod_impl__959_v0>
```
"

fun mod_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    if not object_is_cons(args) {
        native_return(new_err(code_invalid_argument(), "wrong number of arguments: " + object_to_string(args)))
        return null
    }
    let x = cons_car(args)
    args = cons_cdr(args)
    if not object_is_num(x) {
        native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(x)))
        return null
    }
    if not object_is_cons(args) {
        native_return(new_err(code_invalid_argument(), "wrong number of arguments: " + object_to_string(args)))
        return null
    }
    let y = cons_car(args)
    args = cons_cdr(args)
    if not object_is_num(y) {
        native_return(new_err(code_invalid_argument(), "not a number: " + object_to_string(y)))
        return null
    }
    if not object_is_nil(args) {
        native_return(new_err(code_invalid_argument(), "wrong number of arguments: " + object_to_string(args)))
        return null
    }
    if num_value(y) == 0 {
        native_return(new_err(code_zero_division(), "division by zero"))
        return null
    }
    let x_val = num_value(x)
    let y_val = num_value(y)
    native_return(new_ok(new_num(x_val % y_val)))
}

native_track_next_funcall()
mod_impl()
_funcref_mod = native_get_last_funcref()

pub fun runtime_corelib_math_import(env: Num): Num {
    env = env_define(env, new_symbol("%"), new_native_fun(_funcref_mod, _mod_desc))
    env = env_define(env, new_symbol("/"), new_native_fun(_funcref_div, _div_desc))
    env = env_define(env, new_symbol("*"), new_native_fun(_funcref_mul, _mul_desc))
    env = env_define(env, new_symbol("-"), new_native_fun(_funcref_sub, _sub_desc))
    env = env_define(env, new_symbol("+"), new_native_fun(_funcref_add, _add_desc))
    return env
}
