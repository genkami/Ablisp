import * from "./error.ab"
import * from "./object.ab"
import * from "./env.ab"
import * from "./native.ab"
import * from "./eval.ab"
import * from "./testing.ab"
import * from "./eval_test_utils.ab"

let _funcref_decl_return_args = ""

// NOTE: this is not a proper decl.
fun decl_return_args_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    // NOTE: decls should return env, but it doesn't
    native_return(result_args)
    return null
}

native_track_next_funcall()
decl_return_args_impl()
_funcref_decl_return_args = native_get_last_funcref()

let _funcref_decl_define_x_123 = ""

fun decl_define_x_123_impl(): Null {
    let result_args = native_get_args()
    if result_is_err(result_args) {
        return null
    }
    let args = ok_val(result_args)
    if not object_is_cons(args) {
        native_return(new_err(code_invalid_argument(), "invalid argument"))
        return null
    }
    let env = cons_car(args)
    env = env_define(env, new_symbol("x"), new_num(123))
    native_return(new_ok(env))
    return null
}

native_track_next_funcall()
decl_define_x_123_impl()
_funcref_decl_define_x_123 = native_get_last_funcref()

fun test_eval_decl() {
    test_section("test_eval_decl")
    debug_clear_all_objects()

    test_expectation("it should call a special form with unevaluated args")
    let env = new_env()
    env = env_define(env, new_symbol("f"), new_decl(_funcref_decl_return_args, "test"))
    let got = must_parse_and_eval_decl("(f x (+ 1 y) z)", env)?
    let got_env = cons_car(got)
    assert_object_equal(got_env, env)?
    got = cons_cdr(got) // skip context
    got = cons_cdr(got)
    let want = new_nil()
    want = new_cons(new_symbol("z"), want)
    let elem = new_nil()
    elem = new_cons(new_symbol("y"), elem)
    elem = new_cons(new_num(1), elem)
    elem = new_cons(new_symbol("+"), elem)
    want = new_cons(elem, want)
    want = new_cons(new_symbol("x"), want)
    assert_object_equal(got, want)?

    test_expectation("it should return an env obtained by calling a native function")
    let env = new_env()
    env = env_define(env, new_symbol("define-x=123"), new_decl(_funcref_decl_define_x_123, "test"))
    env = env_define(env, new_symbol("y"), new_num(456))
    env = must_parse_and_eval_decl("(define-x=123)", env)?
    let got_x = env_lookup(env, new_symbol("x"))
    assert_ok_object_eqv(got_x, new_num(123))?
    let got_y = env_lookup(env, new_symbol("y"))
    assert_ok_object_eqv(got_y, new_num(456))?
}

main {
    test_eval_decl()?
}
