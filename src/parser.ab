// Module parser provides an S-expression parser.

import {len, chars} from "std"
import * from "./char.ab"
import * from "./object.ab"
import * from "./callstack.ab"
import * from "./error.ab"

let _buf = [Text]
let _buf_len = 0
let _next = 0
let _line = 0
let _column = 0

// init_parser initializes the global parser.
// We only provide a single, global parser because of some restrictions in Amber.
pub fun init_parser(text: Text): Null {
    _buf = chars(text)
    _buf_len = len(_buf)
    _next = 0
    _line = 0
    _column = 0
}

fun new_parse_error(reason: Text): [Text] {
    let err = new_err(code_parse_error(), reason)
    return err_add_trace(err, "line {_line}, column {_column}")
}

fun peek(n: Num): Text {
    if _buf_len <= _next + n {
        return ""
    }
    return _buf[_next + n]
}

fun consume_next(): Text {
    let next_char = _buf[_next]
    _next += 1
    _column += 1
    if next_char == "\n" {
        _line += 1
        _column = 0
    }
    return next_char
}

fun is_eof(): Bool {
    return _buf_len <= _next
}

fun is_whitespace(): Bool {
    let c = peek(0)
    return c == " " or c == "\t" or c == "\n"
}

fun is_comment_begin(): Bool {
    let c = peek(0)
    return c == ";"
}

fun consume_comment(): [Text] {
    loop {
        if is_eof() {
            return new_ok(0)
        }
        let c = consume_next()
        if c == "\n" {
            return new_ok(0)
        }
    }
}

let digit_chars = chars("0123456789")

fun is_number_begin(): Bool {
    let c0 = peek(0)
    loop digit in digit_chars {
        if c0 == digit {
            return true
        }
    }
    if (c0 != "+") and (c0 != "-") {
        return false
    }
    let c1 = peek(1)
    loop digit in digit_chars {
        if c1 == digit {
            return true
        }
    }
    return false
}

#[allow_absurd_cast]
fun consume_number(): [Text] {
    let sign = 1
    let has_explicit_sign = false
    let value = 0
    
    let c = consume_next()
    loop {
        if c == "+" {
            has_explicit_sign = true
            break
        }
        if c == "-" {
            has_explicit_sign = true
            sign = -1
            break
        }
        let is_digit = false
        loop digit in digit_chars {
            if c == digit {
                is_digit = true
                break
            }
        }
        if is_digit {
            value = c as Num
            break
        }
        return new_parse_error("invalid number: " + c)
    }
    let consumed_at_least_one_char = false
    loop {
        if is_eof() {
            break
        }
        c = peek(0)
        let is_digit = false
        loop digit in digit_chars {
            if c == digit {
                is_digit = true
                break
            }
        }
        if not is_digit {
            break
        }
        consume_next()
        consumed_at_least_one_char = true
        value *= 10
        value += c as Num
    }
    if has_explicit_sign and not consumed_at_least_one_char {
        return new_parse_error("invalid number format")
    }
    return new_ok(new_num(sign * value))
}

fun is_text_begin(): Bool {
    let c = peek(0)
    return c == "\""
}

fun consume_text(): [Text] {
    let text = ""
    let bs = backslash(1)
    consume_next() // first double-quote
    loop {
        if is_eof() {
            return new_parse_error("unexpected EOF while parsing text")
        }
        let c = consume_next()
        if {
            c == "\"" {
                break
            }
            c == bs {
                if is_eof() {
                    return new_parse_error("unexpected EOF while parsing escape sequence")
                }
                c = consume_next()
                if {
                    c == "\"" {
                        text += "\""
                    }
                    c == bs {
                        text += bs
                    }
                    c == "n" {
                        text += "\n"
                    }
                    else {
                        return new_parse_error("unsupported escape sequence: " + bs + c)
                    }
                }
            }
            else {
                text += c
            }
        }
    }
    return new_ok(new_text(text))
}

let symlike_head_chars = chars(
    "abcdefghijklmnopqrstuvwxyz" +
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
    "~!@$%^&*-_=+:<>/?"
)

let symlike_tail_chars = symlike_head_chars + chars(
    "0123456789"
)

fun is_symlike_begin(): Bool {
    let c = peek(0)
    loop d in symlike_head_chars {
        if c == d {
            return true
        }
    }
    return false
}

fun consume_symlike(): [Text] {
    let name = consume_next()
    loop {
        if is_eof() {
            break
        }
        let c = peek(0)
        let is_tail_char = false
        loop d in symlike_tail_chars {
            if c == d {
                is_tail_char = true
                break
            }
        }
        if not is_tail_char {
            break
        }
        consume_next()
        name += c
    }
    if {
        name == "t" {
            return new_ok(new_t())
        }
        name == "nil" {
            return new_ok(new_nil())
        }
        else {
            return new_ok(new_symbol(name))
        }
    }
}

fun is_list_begin(): Bool {
    let c = peek(0)
    return c == "("
}

fun is_list_end(): Bool {
    let c = peek(0)
    return c == ")"
}

fun is_quote(): Bool {
    let c = peek(0)
    return c == "'"
}

fun is_dot(): Bool {
    let c = peek(0)
    return c == "."
}

pub fun parse_sexp(): [Text] {
    let stack_base = callstack_current_sp()
    let last_error = new_ok(0)
    let eof_before_next_object = false
    let list_start = -1
    let quote_next_object = -2
    let dot = -3
    loop {
        // Here, the state of the top N elements of the stack is one of the following:
        //   [(stack top) <----------- (bottom)]
        // - [] (empty)
        //     + This means it haven't parsed any object yet.
        // - [obj]
        //     + This means the function parsed exactly one object and is about to return.
        // - [obj_k, obj_{k-1}, ..., obj_1, list_start]
        //     + This means the function is looking for the next object of a list.
        //     + When it finds ')', it replaces the top k+1 elements with a single list.
        // - [quote_next_object]
        //     + This means the function consumed the "'" symbol just now and
        //       is looking for an object to consume.
        // - [obj, quote_next_object]
        //     + This means the function has consumed both the "'" symbol and the object to quote.
        //     + In this case, it replaces the top 2 elements with a single object of the form (quote obj).

        if callstack_current_sp() >= stack_base + 2 {
            let top1 = callstack_pop()
            let top2 = callstack_pop()
            if top1 >= 0 and top2 == quote_next_object {
                let new_top = new_nil()
                new_top = new_cons(top1, new_top)
                new_top = new_cons(new_symbol("quote"), new_top)
                callstack_push(new_top)
            } else {
                callstack_push(top2)
                callstack_push(top1)
            }
        }
        if callstack_current_sp() == stack_base + 1 {
            let top = callstack_pop()
            callstack_push(top)
            if top >= 0 {
                // We have consumed exactly one object and
                // we are not waiting for close parenthesis.
                break
            }
        }

        if is_eof() {
            eof_before_next_object = true
            break
        }
        // TODO: break after consuming a single object
        // NOTE: DO NOT use multiway if statement with function calls because it evaluates
        // all predicates before actually branching, which makes the function
        // significantly slower because each predicate may spawn many processes.
        if is_whitespace() {
            consume_next()
            continue
        }
        if is_comment_begin() {
            let result = consume_comment()
            if result_is_err(result) {
                last_error = result
                break
            }
            continue
        }
        if is_number_begin() {
            let result = consume_number()
            if result_is_err(result) {
                last_error = result
                break
            }
            callstack_push(ok_val(result))
            continue
        }
        if is_text_begin() {
            let result = consume_text()
            if result_is_err(result) {
                last_error = result
                break
            }
            callstack_push(ok_val(result))
            continue
        }
        if is_symlike_begin() {
            let result = consume_symlike()
            if result_is_err(result) {
                last_error = result
                break
            }
            callstack_push(ok_val(result))
            continue
        }
        if is_list_begin() {
            consume_next()
            callstack_push(list_start)
            continue
        }
        if is_dot() {
            consume_next()
            callstack_push(dot)
            continue
        }
        if is_list_end() {
            consume_next()
            let list = new_nil()
            let last_popped = -4
            let has_dot = false
            let invalid = false
            let i = 0
            loop {
                let top = callstack_pop()
                if top == list_start {
                    break
                }
                if top == dot {
                    has_dot = true
                    if i != 1 {
                        last_error = new_err(code_parse_error(), "malformed cons-cell")
                        invalid = true
                        break
                    }
                    list = last_popped
                    i += 1
                    continue
                }
                if top < 0 {
                    last_error = new_err(code_parse_error(), "malformed cons-cell")
                    invalid = true
                    break
                }
                last_popped = top
                list = new_cons(top, list)
                i += 1
            }
            if invalid {
                break
            }
            if has_dot and (i < 3) {
                last_error = new_err(code_parse_error(), "malformed cons-cell")
                break
            }
            callstack_push(list)
            continue
        }
        if is_quote() {
            consume_next()
            callstack_push(quote_next_object)
            continue
        }
        last_error = new_parse_error("unexpected character: " + peek(0))
        break
    }
    if (callstack_current_sp() == stack_base) and eof_before_next_object {
        // We reached an EOF without consuming any objects.
        return new_err(code_stop_iteration(), "EOF")
    }
    if result_is_err(last_error) {
        callstack_rewind(stack_base)
        return last_error
    }
    if callstack_current_sp() != stack_base + 1 {
        callstack_rewind(stack_base)
        return new_parse_error("unexpected EOF")
    }
    let last_value = callstack_pop()
    if last_value < 0 {
        return new_parse_error("parenthesis not closed")
    }
    return new_ok(last_value)
}