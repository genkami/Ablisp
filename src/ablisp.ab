import {len, file_read} from "std"
import * from "./error.ab"
import * from "./object.ab"
import * from "./env.ab"
import * from "./parser.ab"
import * from "./eval.ab"
import * from "./runtime_corelib.ab"

fun show_error(err: [Text]): Null {
    let code = err_code(err)
    let reason = err_reason(err)
    let traces = err_traces(err)
    echo "Error: {code}: {reason}"
    loop t in traces {
        echo "at {t}"
    }
}

fun parse_and_eval_toplevel(source: Text): Null {
    init_parser(source)
    let env = new_env()
    env = runtime_corelib_import(env)
    let i = 0
    loop {
        if i % 10 == 9 {
            garbage_collect([env])
        }
        let result_expr = parse_sexp()
        if result_is_err(result_expr) {
            let code = err_code(result_expr)
            if code == code_stop_iteration() {
                break
            }
            show_error(result_expr)
            fail 1
        }
        let expr = ok_val(result_expr)
        let eval_result = eval_toplevel(expr, env, "<toplevel>")
        if result_is_err(eval_result) {
            let code = err_code(eval_result)
            if code == code_exit_interpreter() {
                break
            }
            show_error(eval_result)
            fail 1
        }
        if result_is_toplevel_decl(eval_result) {
            env = toplevel_decl_env(eval_result)
        }
        i += 1
    }
}

fun usage() {
    echo "Usage:"
    echo "    ablisp /path/to/file.lisp"
    echo "    ablisp -c 'expressions...'"
    fail 1
}

pub fun run(args) {
    if len(args) < 1 {
        usage()?
    }
    let source = ""
    if args[0] == "-c" {
        if len(args) != 2 {
            usage()?
        }
        source = args[1]
    } else {
        if len(args) != 1 {
            usage()?
        }
        let path = args[0]
        source = file_read(path) failed {
            echo "failed to read {path}"
            fail 1
        }
    }
    parse_and_eval_toplevel(source)?
}

main(args) {
    run(args)?
}
