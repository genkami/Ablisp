import * from "./env.ab"
import * from "./error.ab"
import * from "./testing.ab"

fun test_env_lookup() {
    test_section("test_env_lookup")

    let env = new_env()

    test_expectation("env_lookup on an empty env should return undefined_variable")
    let result = env_lookup(env, "foo")
    assert_err_code(result, code_undefined_variable())?

    test_expectation("if a variable is defined, env_lookup should return its value")
    env = env_define(env, "foo", 123)
    result = env_lookup(env, "foo")
    assert_ok_val(result, 123)?

    test_expectation("adding a new variable definition does not affect existing definitions")
    env = env_define(env, "bar", 456)
    result = env_lookup(env, "foo")
    assert_ok_val(result, 123)?
    
    result = env_lookup(env, "bar")
    assert_ok_val(result, 456)?

    test_expectation("a variable in an inner scope can have the same name as the one in an outer scope")
    env = env_define(env, "foo", 999)
    result = env_lookup(env, "foo")
    assert_ok_val(result, 999)?
}

fun test_env_set() {
    test_section("test_env_set")

    let env = new_env()
    env = env_define(env, "foo", 111)
    env = env_define(env, "bar", 222)

    test_expectation("in an inner scope, env_lookup should return the variable in the innermost scope")
    let child_env = env_define(env, "foo", 333)
    let result = env_lookup(child_env, "foo")
    assert_ok_val(result, 333)?

    test_expectation("env_set should modify the variable in the innermost scope")
    child_env = env_set(child_env, "foo", 444)
    result = env_lookup(child_env, "foo")
    assert_ok_val(result, 444)?

    test_expectation("env_set can modify the variable in an outer scope if its name doesn't conflict with a variable in an inner scope")
    child_env = env_set(child_env, "bar", 555)
    result = env_lookup(child_env, "bar")
    assert_ok_val(result, 555)?

    test_expectation("env_apply_child_update applies updates in an outer scope")
    env = env_apply_child_update(env, child_env)
    result = env_lookup(env, "bar")
    assert_ok_val(result, 555)?

    test_expectation("env_apply_child_update discards changes in an inner scope") 
    result = env_lookup(env, "foo")
    assert_ok_val(result, 111)?
}

pub fun test_env() {
    test_env_lookup()?
    test_env_set()?
}

main {
    test_env()?
}
