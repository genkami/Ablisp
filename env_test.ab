import * from "./env.ab"
import * from "./error.ab"

fun test_env_lookup() {
    let env = new_env()

    let result = env_lookup(env, "foo")
    if not result_is_err(result) {
        echo "result should be err, got {result}"
        fail 1
    }
    let code = err_code(result)
    if code != code_undefined_variable() {
        echo "got unexpected code: {code}"
        fail 1
    }

    env = env_define(env, "foo", 123)
    result = env_lookup(env, "foo")
    if not result_is_ok(result) {
        echo "result should be ok, got {result}"
        fail 1
    }
    let val = ok_val(result)
    if val != 123 {
        echo "expected 123, got {val}"
        fail 1
    }

    env = env_define(env, "bar", 456)
    result = env_lookup(env, "foo")
    if not result_is_ok(result) {
        echo "result should be ok, got {result}"
        fail 1
    }
    let val = ok_val(result)
    if val != 123 {
        echo "expected 123, got {val}"
        fail 1
    }
    result = env_lookup(env, "bar")
    if not result_is_ok(result) {
        echo "result should be ok, got {result}"
        fail 1
    }
    let val = ok_val(result)
    if val != 456 {
        echo "expected 456, got {val}"
        fail 1
    }

    env = env_define(env, "foo", 999) // same var in an inner scope
    result = env_lookup(env, "foo")
    if not result_is_ok(result) {
        echo "result should be ok, got {result}"
        fail 1
    }
    let val = ok_val(result)
    if val != 999 {
        echo "expected 999, got {val}"
        fail 1
    }
}

fun test_env_set() {
    let env = new_env()
    env = env_define(env, "foo", 111)
    env = env_define(env, "bar", 222)

    let child_env = env_define(env, "foo", 333)

    let result = env_lookup(child_env, "foo")
    if not result_is_ok(result) {
        echo "result should be ok, got {result}"
        fail 1
    }
    let val = ok_val(result)
    if val != 333 {
        echo "expected 333, got {val}"
        fail 1
    }

    child_env = env_set(child_env, "foo", 444)
    child_env = env_set(child_env, "bar", 555)
    result = env_lookup(child_env, "foo")
    if not result_is_ok(result) {
        echo "result should be ok, got {result}"
        fail 1
    }
    val = ok_val(result)
    if val != 444 {
        echo "expected 444, got {val}"
        fail 1
    }
    result = env_lookup(child_env, "bar")
    if not result_is_ok(result) {
        echo "result should be ok, got {result}"
        fail 1
    }
    val = ok_val(result)
    if val != 555 {
        echo "expected 555, got {val}"
        fail 1
    }

    env = env_apply_child_update(env, child_env)
    result = env_lookup(env, "foo")
    if not result_is_ok(result) {
        echo "result should be ok, got {result}"
        fail 1
    }
    val = ok_val(result)
    if val != 111 {
        echo "expected 111, got {val}"
        fail 1
    }
    result = env_lookup(env, "bar")
    if not result_is_ok(result) {
        echo "result should be ok, got {result}"
        fail 1
    }
    val = ok_val(result)
    if val != 555 {
        echo "expected 555, got {val}"
        fail 1
    }
}

pub fun test_env() {
    test_env_lookup() failed {
        echo "test_env_lookup failed"
        fail 1
    }
    test_env_set() failed {
        echo "test_env_set failed"
        fail 1
    }
}

main {
    test_env()?
}
