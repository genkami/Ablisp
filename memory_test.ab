import {len} from "std"
import * from "./memory.ab"
import * from "./testing.ab"

fun test_memory_new() {
    test_section("test_memory_new")

    test_expectation("memory_new(0) returns an empty memory")
    let mem1 = memory_new(0)
    assert_equal_text_array(mem1, [Text])?

    test_expectation("memory_new(n) returns an array with 3*n zeroes")
    let mem2 = memory_new(2)
    assert_equal_text_array(mem2, ["0", "0", "0", "0", "0", "0"])?

    test_expectation("every element in an memory returned by memory_new() should be unused")
    let mem3 = memory_new(10)
    loop i in 0..10 {
        assert_equal_num(memory_get_tag(mem3, i), tag_unused())?
    }
}

fun test_memory_grow() {
    test_section("test_memory_grow")

    test_expectation("if a memory is empty, memory_grow returns a zero memory with the default size")
    let mem1 = [Text]
    mem1 = memory_grow(mem1)
    assert_equal_text_array(mem1, ["0", "0", "0", "0", "0", "0"])?

    test_expectation("if a memory is too short, memory_grow extends it to the default size")
    let mem2 = ["a", "b"]
    mem2 = memory_grow(mem2)
    assert_equal_text_array(mem2, ["a", "b", "0", "0", "0", "0"])?

    test_expectation("memory_grow doubles the length of a memory")
    let mem3 = ["a", "b", "c", "d"]
    mem3 = memory_grow(mem3)
    assert_equal_text_array(mem3, ["a", "b", "c", "d", "0", "0", "0", "0"])?
}

fun test_memory_get_set() {
    test_section("test_memory_get_set")
    let mem = memory_new(100)

    test_expectation("an initial state of a memory element should be unused")
    assert_equal_num(memory_get_tag(mem, 0), tag_unused())?

    test_expectation("memory_put_num puts a num to a memory")
    mem = memory_put_num(mem, 0, 123)
    assert_equal_num(memory_get_tag(mem, 0), tag_num())?
    assert_equal_num(memory_get_num(mem, 0), 123)?

    test_expectation("memory_put_text puts a num to a memory")
    assert_equal_num(memory_get_tag(mem, 1), tag_unused())?
    mem = memory_put_text(mem, 1, "hello")
    assert_equal_num(memory_get_tag(mem, 1), tag_text())?
    assert_equal_text(memory_get_text(mem, 1), "hello")?

    test_expectation("memory_put_t puts `t` to a memory")
    assert_equal_num(memory_get_tag(mem, 2), tag_unused())?
    mem = memory_put_t(mem, 2)
    assert_equal_num(memory_get_tag(mem, 2), tag_t())?

    test_expectation("memory_put_nil puts `nil` to a memory")
    assert_equal_num(memory_get_tag(mem, 3), tag_unused())?
    mem = memory_put_nil(mem, 3)
    assert_equal_num(memory_get_tag(mem, 3), tag_nil())?

    test_expectation("memory_put_cons puts a cons-cell to a memory")
    assert_equal_num(memory_get_tag(mem, 4), tag_unused())?
    mem = memory_put_cons(mem, 4, 123, 456)
    assert_equal_num(memory_get_tag(mem, 4), tag_cons())?
    assert_equal_num(memory_get_cons_car(mem, 4), 123)?
    assert_equal_num(memory_get_cons_cdr(mem, 4), 456)?

    test_expectation("memory_clear clears a given element")
    mem = memory_clear(mem, 4)
    assert_equal_num(memory_get_tag(mem, 4), tag_unused())?
}

fun test_memory_garbage_collect() {
    test_section("test_memory_garbage_collect")
    test_expectation("memory_garbage_collect clears all objects that are not reachable")

    // - obj 0 is referenced
    // - obj 1 is referenced and references 2 and 3
    // - obj 2 is referenced by obj 1
    // - obj 3 is referenced by obj 1 and references 4 and 5
    // - obj 4 is referenced by obj 3
    // - obj 5 is referenced by obj 3
    // - obj 6 is not referenced but references 7 and 8
    // - obj 7 is referenced by obj 6
    // - obj 8 is referenced by obj 6
    // - obj 9 is not referenced at all
    // - obj 10 is unused
    let mem = memory_new(11)
    mem = memory_put_text(mem, 0, "I'm #0")
    mem = memory_put_cons(mem, 1, 2, 3)
    mem = memory_put_text(mem, 2, "I'm #2")
    mem = memory_put_cons(mem, 3, 4, 5)
    mem = memory_put_text(mem, 4, "I'm #4")
    mem = memory_put_nil(mem, 5)
    mem = memory_put_cons(mem, 6, 7, 8)
    mem = memory_put_text(mem, 7, "I'm #7")
    mem = memory_put_text(mem, 8, "I'm #8")
    mem = memory_put_text(mem, 9, "I'm #9")

    let refobj = init_referenced_objects(11)
    refobj[0] = true
    refobj[1] = true
    mem = memory_garbage_collect(mem, refobj)

    assert_equal_num(memory_get_tag(mem, 0), tag_text())?
    assert_equal_num(memory_get_tag(mem, 1), tag_cons())?
    assert_equal_num(memory_get_tag(mem, 2), tag_text())?
    assert_equal_num(memory_get_tag(mem, 3), tag_cons())?
    assert_equal_num(memory_get_tag(mem, 4), tag_text())?
    assert_equal_num(memory_get_tag(mem, 5), tag_nil())?
    loop i in 6..=10 {
        assert_equal_num(memory_get_tag(mem, i), tag_unused())?
    }
}

pub fun test_memory() {
    test_memory_new()?
    test_memory_grow()?
    test_memory_get_set()?
    test_memory_garbage_collect()?
}

main {
    test_memory()?
}