// Module testing provides test helpers.

import {len} from "std"
import * from "./object.ab"
import * from "./error.ab"

let _test_section = ""
let _test_expectation = ""

pub fun test_section(section: Text): Null {
    _test_section = section
}

pub fun test_expectation(expectation: Text): Null {
    _test_expectation = expectation
    echo "{_test_section}: {_test_expectation}"
}

pub fun assert(expr: Bool, msg: Text): Null {
    if not expr {
        echo "{_test_section}: {_test_expectation}\n{msg}"
        fail 1
    }
}

pub fun assert_equal_num(lhs: Num, rhs: Num): Null {
    assert(lhs == rhs, "value mismatch: lhs={lhs}, rhs={rhs}")?
}

pub fun assert_equal_text(lhs: Text, rhs: Text): Null {
    assert(lhs == rhs, "value mismatch:\nlhs={lhs}\nrhs={rhs}")?
}

fun text_array_equal(s1: [Text], s2: [Text]): Bool {
    if len(s1) != len(s2) {
        return false
    }
    let i = 0
    loop {
        if len(s1) <= i {
            break
        }
        if s1[i] != s2[i] {
            return false
        }
        i += 1
    }
    return true
}

pub fun assert_equal_text_array(lhs: [Text], rhs: [Text]): Null {
    let msg = "value mismatch:\nlhs="
    let i = 0
    loop {
        if len(lhs) <= i {
            break
        }
        if i != 0 {
            msg += " "
        }
        msg += lhs[i]
        i += 1
    }
    msg += "\nrhs="
    i = 0
    loop {
        if len(rhs) <= i {
            break
        }
        if i != 0 {
            msg += " "
        }
        msg += rhs[i]
        i += 1
    }
    assert(text_array_equal(lhs, rhs), msg)?
}

pub fun assert_object_eqv(lhs: Num, rhs: Num): Null {
    let lhs_text = object_to_string(lhs)
    let rhs_text = object_to_string(rhs)
    assert(object_eqv(lhs, rhs), "value mismatch:\nlhs={lhs_text}\nrhs={rhs_text}")?
}

pub fun assert_object_equal(lhs: Num, rhs: Num): Null {
    let lhs_text = object_to_string(lhs)
    let rhs_text = object_to_string(rhs)
    assert(object_equal(lhs, rhs), "value mismatch:\nlhs={lhs_text}\nrhs={rhs_text}")?
}

pub fun assert_ok(result: [Text]): Null {
    assert(result_is_ok(result), "value is not ok: {result}")?
}

pub fun assert_ok_val(result: [Text], val: Num): Null {
    assert_ok(result)?
    assert_equal_num(ok_val(result), val)?
}

pub fun assert_ok_object_eqv(result: [Text], obj: Num): Null {
    assert_ok(result)?
    assert_object_eqv(ok_val(result), obj)?
}

pub fun assert_ok_object_equal(result: [Text], obj: Num): Null {
    assert_ok(result)?
    assert_object_equal(ok_val(result), obj)?
}

pub fun assert_err(result: [Text]): Null {
    assert(result_is_err(result), "value is not err: {result}")?
}

pub fun assert_err_code(result: [Text], code: Text): Null {
    assert_err(result)?
    assert_equal_text(err_code(result), code)?
}
