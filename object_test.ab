import * from "./memory.ab"
import * from "./object.ab"
import * from "./testing.ab"

fun test_object_new() {
    test_section("test_object_new")

    debug_clear()

    test_expectation("new_num allocates a new num")
    let ptr0 = new_num(123)
    assert_equal_num(ptr0, 0)?
    assert_equal_num(tag_of(ptr0), tag_num())?
    assert_equal_num(num_value(ptr0), 123)?

    test_expectation("new_text allocates a new text")
    let ptr1 = new_text("hoge")
    assert_equal_num(ptr1, 1)?
    assert_equal_num(tag_of(ptr1), tag_text())?
    assert_equal_text(text_value(ptr1), "hoge")?

    test_expectation("new_t allocates a new `t`")
    let ptr2 = new_t()
    assert_equal_num(ptr2, 2)?
    assert_equal_num(tag_of(ptr2), tag_t())?

    test_expectation("new_nil allocates a new `nil`")
    let ptr3 = new_nil()
    assert_equal_num(ptr3, 3)?
    assert_equal_num(tag_of(ptr3), tag_nil())?

    test_expectation("new_cons allocates a new cons-cell")
    let ptr4 = new_cons(0, 1)
    assert_equal_num(ptr4, 4)?
    assert_equal_num(tag_of(ptr4), tag_cons())?
    assert_equal_num(cons_car(ptr4), 0)?
    assert_equal_num(cons_cdr(ptr4), 1)?

    // 3 is nil
    // 4 is a cons-cell which references 0 and 1
    // So 2 is the only object which will be garbage collected
    let refptrs = [4, 3]
    garbage_collect(refptrs)

    test_expectation("new_XXX reuses garbage collected objects")
    let ptr5 = new_num(999)
    assert_equal_num(ptr5, 2)?

    test_expectation("new_XXX does not reuse reachable objects")
    let ptr6 = new_num(888)
    assert_equal_num(ptr6, 5)?
}

pub fun test_object() {
    test_object_new()?
}

main {
    test_object()?
}
