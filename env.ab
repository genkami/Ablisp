// Package env provides an environment, which is a mapping
// from variable names to their values.

import {len} from "std"
import * from "./error.ab"
import * from "./object.ab"

// new_env returns an empty environment.
// An environment is of the form (var1 val1 var2 val2 ...).
pub fun new_env(): Num {
    return new_nil()
}

// env_define defines a new variable with the given name and value.
pub fun env_define(env: Num, name: Num, value: Num): Num {
    env = new_cons(value, env)
    env = new_cons(name, env)
    return env
}

// env_lookup returns a value (in ptr wrapped with result) of a variable.
// If there are multiple variables with the same name, it returns
// the one in the innermost scope (i.e. the one defined last).
// If there is no such variable, it returns an error result.
#[allow_absurd_cast]
pub fun env_lookup(env: Num, name: Num): [Text] {
    if not object_is_symbol(name) {
        return new_err(code_invalid_argument(), "invalid variable name: {object_to_string(name)}")
    }
    loop {
        if object_is_nil(env) {
            return new_err(code_undefined_variable(), "undefined: " + text_value(name))
        }
        if not object_is_cons(env) {
            return new_err(code_invalid_argument(), "invalid env")
        }
        let entry_name = cons_car(env)
        if not object_is_symbol(entry_name) {
            return new_err(code_invalid_argument(), "invalid variable name: {object_to_string(entry_name)}")
        }
        if not object_is_cons(cons_cdr(env)) {
            return new_err(code_invalid_argument(), "invalid env")
        }
        let entry_value = cons_car(cons_cdr(env))
        env = cons_cdr(cons_cdr(env))
        if object_eqv(name, entry_name) {
            return new_ok(entry_value)
        }
    }
}

// env_set sets a variable to a given value (in ptr).
// If there are multiple variables with the same name, it modifies
// the one in the innermost scope (i.e. the one defined last).
// If there is no such variable, it returns an error.
// If there is no error, it returns new_ok(0).
pub fun env_set(env: Num, name: Num, value: Num): [Text] {
    if not object_is_symbol(name) {
        return new_err(code_invalid_argument(), "invalid variable name: {object_to_string(name)}")
    }
    loop {
        if object_is_nil(env) {
            return new_err(code_undefined_variable(), "undefined: " + text_value(name))
        }
        if not object_is_cons(env) {
            return new_err(code_invalid_argument(), "invalid env")
        }
        let entry_name = cons_car(env)
        if not object_is_symbol(entry_name) {
            return new_err(code_invalid_argument(), "invalid variable name: {object_to_string(entry_name)}")
        }
        if not object_is_cons(cons_cdr(env)) {
            return new_err(code_invalid_argument(), "invalid env")
        }
        let entry_value_and_rest = cons_cdr(env)
        if object_eqv(name, entry_name) {
            cons_set_car(entry_value_and_rest, value)
            return new_ok(0)
        }
        env = cons_cdr(entry_value_and_rest)
    }
}
