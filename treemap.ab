// Since we cannot compare two Texts with < operator,
// we have to implement a function to do that.
// Currently we can't add a type annotation on this function
// because we don't have a way to represent the type of nodes.
pub fun text_lt(s1, s2) {
    $[ "{s1}" \< "{s2}" ]$ failed {
        return false
    }
    return true
}

pub fun new_leaf(key, value) {
    return ["Tree", true as Text, key, value as Text]
}

pub fun new_branch(key, left, right) {
    // cannot create a hetero (or nested) array...
    return ["Tree", false as Text, key, left, right]
}

pub fun is_tree(obj) {
    return obj[0] == "Tree"
}

pub fun tree_is_leaf(tree) {
    return tree[1]
}

pub fun leaf_key(tree) {
    return tree[2]
}

pub fun leaf_value(tree) {
    return tree[3]
}

pub fun branch_key(tree) {
    return tree[2]
}

pub fun branch_left(tree) {
    return tree[3]
}

pub fun branch_right(tree) {
    return tree[4]
}
