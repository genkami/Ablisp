import {len} from "std"
import * from "./memory.ab"

fun memory_equal(m1: [Text], m2: [Text]): Bool {
    if len(m1) != len(m2) {
        return false
    }
    // NOTE: don't use `loop i in 0..X` since it produces `seq 0 -1` when `X == 0`
    let i = 0
    loop {
        if len(m1) <= i {
            break
        }
        if m1[i] != m2[i] {
            return false
        }
        i += 1
    }
    return true
}

fun test_memory_new() {
    let mem1 = memory_new(0)
    if not memory_equal(mem1, [Text]) {
        echo "memory_new(0) = {mem1}"
        fail 1
    }

    let mem2 = memory_new(5)
    if not memory_equal(mem2, ["0", "0", "0", "0", "0"]) {
        echo "memory_new(5) = {mem2}"
        fail 1
    }
}

fun test_memory_grow() {
    let mem1 = [Text]
    mem1 = memory_grow(mem1)
    if not memory_equal(mem1, ["0", "0", "0", "0", "0"]) {
        echo "memory_grow(mem1) = {mem1}"
        fail 1
    }
    
    let mem2 = ["a", "b"]
    mem2 = memory_grow(mem2)
    if not memory_equal(mem2, ["a", "b", "0", "0", "0"]) {
        echo "memory_grow(mem2) = {mem2}"
        fail 1
    }

    let mem3 = ["a", "b", "c", "d"]
    mem3 = memory_grow(mem3)
    if not memory_equal(mem3, ["a", "b", "c", "d", "0", "0", "0", "0"]) {
        echo "memory_grow(mem3) = {mem3}"
        fail 1
    }
}

pub fun test_memory() {
    test_memory_new() failed {
        echo "test_memory_new failed"
        fail 1
    }
    test_memory_grow() failed {
        echo "test_memory_grow failed"
        fail 1
    }
}

main {
    test_memory()?
}